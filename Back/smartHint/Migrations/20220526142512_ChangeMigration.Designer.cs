// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using smartHint;

#nullable disable

namespace smartHint.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20220526142512_ChangeMigration")]
    partial class ChangeMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("smartHint.Models.Fisica", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("cpf")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("dataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("genero")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("cpf")
                        .IsUnique();

                    b.ToTable("Fisica");
                });

            modelBuilder.Entity("smartHint.Models.Juridico", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("cnpj")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("inscricaoEstadual")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("varchar(18)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("cnpj", "inscricaoEstadual")
                        .IsUnique();

                    b.ToTable("Juridico");
                });

            modelBuilder.Entity("smartHint.Models.Loja", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Loja");
                });

            modelBuilder.Entity("smartHint.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("bloqueado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("dataCadastro")
                        .HasMaxLength(14)
                        .HasColumnType("datetime(6)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("nomeRazaoSocial")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("telefone")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("tipoPessoa")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("varchar(18)");

                    b.HasKey("Id");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("smartHint.Models.Fisica", b =>
                {
                    b.HasOne("smartHint.Models.User", "User")
                        .WithMany("Fisico")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("smartHint.Models.Juridico", b =>
                {
                    b.HasOne("smartHint.Models.User", "User")
                        .WithMany("Juridico")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("smartHint.Models.Loja", b =>
                {
                    b.HasOne("smartHint.Models.User", null)
                        .WithMany("Loja")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("smartHint.Models.User", b =>
                {
                    b.Navigation("Fisico");

                    b.Navigation("Juridico");

                    b.Navigation("Loja");
                });
#pragma warning restore 612, 618
        }
    }
}
